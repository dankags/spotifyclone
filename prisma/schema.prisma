// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {  
 provider = "prisma-client-js"  
//  engineType = "binary"  
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(uuid()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role{
  ADMIN
  USER
  ARTIST
}

model User {
  id            String   @id @default(uuid()) @map("_id") 
  name          String?
  email         String   @unique
  password      String?
  birthDate     DateTime?  
  gender        String?
  emailVerified DateTime?
  image         String?
  admin Boolean @default(false)
  roles  Role  @default(USER)
  
  likedSongs    LikedSong[]
  accounts      Account[]
  sessions      Session[]
  artist        Artist[] 
  following     Follow[] @relation("following")
  followers     Follow[] @relation("followers")
  music         Music[]
  playlist      Playlist[]
  likedPlaylist LikedPlaylist[]
}

model Follow{
   id            String   @id @default(uuid()) @map("_id")
   followerId    String 
   followingId   String 

   follower User @relation("followers",fields: [followerId],references: [id],onDelete:Cascade)
   following User @relation("following",fields: [followingId],references: [id],onDelete:Cascade)

   
}


model VerificationToken {
  identifier String  @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LikedSong{
  id String  @id @default(uuid()) @map("_id")
  userId String @unique 
  title String @default("liked songs")
  coverImageUrl String? 
  slug String @default("playlist")
  songs String[] @default([])

  LikedSongId User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model Artist{
  id String @id @default(uuid()) @map("_id") 
  userId String @unique
  verified Boolean @default(false)
  profileCoverImage String?
  backImg String?
  artistAbout String?
  slug String @default("artist")
  
  user   User @relation(fields: [userId],references: [id],onDelete: Cascade)
 
}

model Music{
  id String @id @default(uuid()) @map("_id") 
  musicName String @unique
  categoryName String 
  artistId String 
  otherFeaturedArtist String[] @default([])
  viewsNumber Int @default(0)
  musicImage String
  audioUrl String
  duration String
  lyrics String?
  release DateTime?
  uploaded DateTime @default(now())
  
  
  music User @relation(fields: [artistId],references: [id] ,onDelete: Cascade)
  category Category @relation(fields: [categoryName],references: [category],onDelete: Cascade)
  
} 

model Category{
  id String @id @default(uuid()) @map("_id") 
  category String @unique
  backgroundColor String 
  backgroundImg String

musics Music[] 
}

model Playlist{
  id String @id @default(uuid()) @map("_id")
  creatorId String 
  name String @unique
  image String
  Desc String ?
  listeners Int
  musiclist String [] @default([])
  slug String @default("playlist")

  artist User @relation(fields: [creatorId],references: [id],onDelete: Cascade)
  
}

model LikedPlaylist{
   id String @id @default(uuid()) @map("_id")
   userId String @unique
   playlists String[] @default([])

   user   User @relation(fields: [userId],references: [id],onDelete: Cascade) 
}
